---
title: "Maryland Olympians"
format: html
editor: visual
jupyter: python3
---

```{python}
import pandas as pd
import requests
import json
from pandas import json_normalize

response = requests.get('https://www.teamusa.com/api/athletes?limit=10000&skip=0')
data = response.json()

def print_json_structure(d, indent=0):
    for key, value in d.items():
        print('  ' * indent + str(key))
        if isinstance(value, dict):
            print_json_structure(value, indent + 1)
        elif isinstance(value, list):
            if len(value) > 0 and isinstance(value[0], dict):
                print_json_structure(value[0], indent + 1)
            else:
                print('  ' * (indent + 1) + str(value))


```


```{python}

athletes_file_path = os.path.join(data_folder, 'athletes.json')

with open(athletes_file_path, 'w') as json_file_athletes:
    json.dump(data, json_file_athletes)
```

```{python}

schedule = requests.get(
    'https://schedules.nbcolympics.com/api/v1/schedule?timeZone=America%2FNew_York&startDate=2024-01-01&endDate=2024-12-31'
    )


```

```{python}
import os

# Specify the path to the data folder in the repo
data_folder = '/Users/greg.morton/Documents/baltimoreBanner/Projects/2024/maryland_olympians/data'

# Create the data folder if it doesn't exist
if not os.path.exists(data_folder):
    os.makedirs(data_folder)

# Specify the file path for the exported JSON file
json_file_path = os.path.join(data_folder, 'schedule.json')

# Export the JSON data to the file
with open(json_file_path, 'w') as json_file:
    json.dump(sched, json_file)

# Print the file path for reference
print(f'Successfully exported JSON file to: {json_file_path}')

```

```{r}
library(rvest)
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
library(sf)
library(units)
library(knitr)
library(kableExtra)
library(tidycensus)
library(purrr)
library(rcartocolor)
library(viridis)
library(DHARMa)
library(mgcv)
library(MASS)
library(gratia)
library(mapview)
library(mgcViz)
library(nngeo)
library(janitor)
library(hms)

# turn off scientific notation
options(scipen = 999)

```

```{r}
json_schedule_path <- "data/schedule.json"


big_sched <- jsonlite::fromJSON(json_schedule_path, simplifyDataFrame = T, flatten = T) %>%
  .$data %>%
  clean_names()

big_sched %>% 
  # as.data.frame() %>% 
  clean_names() %>% 
  mutate(single_event_start_date = as_datetime(as.numeric(single_event_start_date)),
       hms_start_time = hms(seconds_to_period(as.numeric(single_event_start_date))),
       hour = hour(hms_start_time),
       minute = minute(hms_start_time),
       second = second(hms_start_time),
       single_event_end_date = as_datetime(as.numeric(single_event_end_date)),
       ) %>% 
  unnest(sports) %>% 
  View()

sched_test <- big_sched %>%
  dplyr::select(
    single_event_internal_title, 
    single_event_thumbnail_alt_title,
    single_event_short_title,
    single_event_status,
    single_event_stream_type,
    single_event_start_date,
    single_event_end_date,
    single_event_summary,
    single_event_is_medal_session,
    single_event_video_url,
    single_event_peacock_destination_url,
    single_event_language,
    single_event_game_type,
    single_event_game,
    single_event_last_modified,
    single_event_network_name,
    single_event_network_priority,
    single_event_network_upcoming_message,
    single_event_restricted_timezones,
    sports:topics
  ) %>% 
  # unnest_wider(sports) %>% 
  mutate(single_event_start_date = as_datetime(as.numeric(single_event_start_date)),
     single_event_end_date = as_datetime(as.numeric(single_event_end_date)),
     single_event_last_modified = as_datetime(as.numeric(single_event_last_modified)),
     athlete = map(athletes, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
     athlete_ids = map(athletes, ~ .x$athleteId) %>% map_chr(~ paste(.x, collapse = ", ")),
     sport = map(sports, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
     phase = map(phases, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
     countries = map(countries, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
     tags = map(topics, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
     olympic_unit = map(units, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
     event = map(events, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", "))
     ) %>% 
  dplyr::select(-athletes, 
                -sports, 
                -phases, 
                -countries, 
                -topics, 
                -units,
                events,
                -single_event_thumbnail_alt_title,
                -single_event_network_upcoming_message,
                -events) %>% 
  dplyr::select(
    sport, 
    athlete,
    athlete_ids,
    phase,
    single_event_internal_title,
    single_event_short_title,
    single_event_start_date,
    single_event_end_date,
    single_event_last_modified,
    single_event_summary,
    single_event_is_medal_session,
    single_event_network_name,
    single_event_video_url,
    single_event_peacock_destination_url,
    single_event_language,
    everything()
  )

  # View()
  # wiwrite_csv("/Users/greg.morton/Documents/baltimoreBanner/Projects/2024/maryland_olympians/data/schedule.csv")
  

  

```

```{r}
athletes_path <- "data/athletes_2.json"

big_athletes <- jsonlite::fromJSON(athletes_path, simplifyDataFrame = T, flatten = T) %>% 
  .$entries %>% 
  clean_names()

athletes <- big_athletes %>% 
  dplyr::select(
    first_name,
    last_name,
    content_tags,
    olympic_paralympic,
    sport,
    future_olympics,
    past_olympics,
    olympian_paralympian_years,
    olympian_paralympian_qualified,
    quick_facts_hometown_city,
    quick_facts_hometown_state,
    medals_bronze,
    medals_silver,
    medals_gold,
    thumbnail_image_url,
    para_classification,
    bio_biography,
    quick_facts_height,
    quick_facts_birthday,
    quick_facts_deceased_date,
    quick_facts_age,
    quick_facts_education,
    uid,
    url
  ) %>% 
  mutate(
    season = map(sport, ~ .x$season) %>% map_chr(~ paste(.x, collapse = ", ")),
    type = map(sport, ~ .x$type) %>% map_chr(~ paste(.x, collapse = ", ")),
    sport = map(sport, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
    tags = map(content_tags, ~ .x$title) %>% map_chr(~ paste(.x, collapse = ", ")),
    quick_facts_birthday = lubridate::as_date(quick_facts_birthday),
    quick_facts_deceased_date = lubridate::as_date(quick_facts_deceased_date),
    full_name = paste(first_name, last_name, sep = " ")
      ) %>% 
  rename(
    athlete_id = uid,
    athlete_url = url,
    height = quick_facts_height,
    birth_date = quick_facts_birthday,
    deceased_date = quick_facts_deceased_date,
    age = quick_facts_age,
    education = quick_facts_education,
    hometown_city = quick_facts_hometown_city,
    hometown_state = quick_facts_hometown_state
  ) %>% 
  dplyr::select(
    first_name,
    last_name,
    full_name,
    olympic_paralympic,
    sport,
    season,
    hometown_city,
    hometown_state,
    future_olympics,
    past_olympics,
    olympian_paralympian_years,
    olympian_paralympian_qualified,
    medals_bronze,
    medals_silver,
    medals_gold,
    thumbnail_image_url,
    para_classification,
    bio_biography,
    height,
    birth_date,
    deceased_date,
    age,
    education,
    tags,
    athlete_id,
    athlete_url
  )

```

# analysis

## part 1: counting 

### who is from Maryland?
```{r}

census_variables <- tidycensus::load_variables(2022, "acs5", cache = TRUE)
# get census population data from 2022 acs 
population_data <- get_acs(
  geography = "state",
  variables = c(
    "B01003_001", # Total population
    "B15003_001", # educational attainment total
    "B15003_002", # no schooling
    "B15003_017", # educational attainment hs diploma
    "B15003_019", #educational attainment some college, < 1 year
    "B15003_020", # educational attainment some college, > 1 year
    "B15003_022", # educational attainment bachelors
    "B15003_023", # educational attainment graduate
    "B15003_024", # educational attainment professional
    "B15003_025", # educational attainment doctorate
    "B19013_001" # median household income 
    ),
  year = 2022, # Specify the year
  survey = "acs5" # Use the 5-year ACS data
) %>% 
  clean_names %>% 
  dplyr::select(name, variable, estimate) %>%  # Select only necessary columns
  # make it wider so every state is it's own row
  pivot_wider(
    names_from = variable,
    values_from = estimate) %>% 
  rename(
    state_population = B01003_001,
    edu_attainment_total = B15003_001,
    no_schooling = B15003_002,
    hs_diploma = B15003_017,
    some_college_lt_1 = B15003_019,
    some_college_gt_1 = B15003_020,
    bachelors = B15003_022,
    graduate = B15003_023,
    professional = B15003_024,
    doctorate = B15003_025,
    median_household_income = B19013_001
  ) %>% 
  mutate(pct_hs_diploma = hs_diploma / edu_attainment_total * 100,
         pct_some_college_lt_1 = some_college_lt_1 / edu_attainment_total * 100,
         pct_some_college_gt_1 = some_college_gt_1 / edu_attainment_total * 100,
         pct_bachelors = bachelors / edu_attainment_total * 100,
         pct_graduate = graduate / edu_attainment_total * 100,
         pct_professional = professional / edu_attainment_total * 100,
         pct_doctorate = doctorate / edu_attainment_total * 100,
         pct_degree = (bachelors + graduate + professional + doctorate) / edu_attainment_total * 100
        ) 
  

# create an object that'll let us join olympians to population data
state_bridge <- 
  data.frame(
  state.name,
  state.abb
  )

athletes_summary <- 
  athletes %>% 
  filter(str_detect(future_olympics, "2024")) %>%
  # filter(olympic_paralympic != "Paralympian") %>% 
  mutate(hometown_state = case_when(
    hometown_state == "MD" ~ "MD",
    str_detect(str_to_lower(hometown_city), "washington") ~ "DC",
    str_detect(str_to_lower(full_name), "ruby lilley") ~ "MD",
    TRUE ~ hometown_state
  )) %>%
  group_by(hometown_state) %>%
  summarise(n = n(), 
            total_medals = sum(medals_bronze + medals_silver + medals_gold, na.rm = T)) %>%
  left_join(state_bridge, by = c("hometown_state" = "state.abb")) %>% 
  left_join(population_data, by = c("state.name" = "name")) %>% 
  mutate(athletes_per_100k = n / state_population * 100000,
         medals_per_100k = total_medals / state_population * 100000,
         medals_per_athlete = total_medals / n) %>% 
  ungroup() 
```

### How does Maryland rank in terms of total athletes
```{r}
athletes_summary %>% 
    arrange(desc(n)) 
```

### Athletes per 100k
```{r}
athletes_summary %>% 
  arrange(desc(athletes_per_100k))

```
### Total medals 
```{r}
athletes_summary %>% 
  arrange(desc(total_medals))
```


### Medals per 100k
```{r}
athletes_summary %>% 
  arrange(desc(medals_per_100k))
```

### Medals per athlete
```{r}
athletes_summary %>% 
  arrange(desc(medals_per_athlete)) %>% 
  dplyr::select(hometown_state:state.name, medals_per_athlete, everything())
```

### Athletes and medals per sport, by state 
```{r}
  athletes %>% 
  filter(str_detect(future_olympics, "2024")) %>%
  group_by(hometown_state, sport) %>% 
  filter(!is.na(hometown_state),
         sport != "") %>% 
  summarise(n = n()) %>% 
  pivot_wider(names_from = sport, values_from = n) %>% 
  # replace all NAs with 0
  mutate_all(~ replace_na(., 0)) %>% 
  left_join(state_bridge, by = c("hometown_state" = "state.abb")) %>% 
  left_join(population_data, by = c("state.name" = "name")) %>% 
  View()

```

## Part 2: Relationships 

### What is the relationship between education and olympic participation?
```{r}

athletes_summary %>% 
  filter(!is.na(hometown_state)) %>% 
  mutate(is_maryland = ifelse(hometown_state == "MD", "Maryland", "Other")) %>% 
  arrange(desc(medals_per_100k))
  # head(20) %>% 
  # write_csv("data/medals_per_100k.csv")
  ggplot(aes(x = pct_degree, y = athletes_per_100k, label = state.abb)) +
  geom_point(aes(size = n, color = pct_degree)) +
  geom_smooth() +
  scale_size_continuous(range = c(1, 10)) +
  scale_color_viridis_c() +
  labs(
    title = "Olympic Athletes per 100k vs. % of Population with a Degree",
    x = "% of Population with a Degree",
    y = "Olympic Athletes per 100k"
  ) +
  theme_minimal()

```

### What is the relationship between median hh income and olympic participation?
```{r}
athletes_summary %>% 
  ggplot(aes(x = median_household_income, y = athletes_per_100k, label = state.abb)) +
  geom_point(aes(size = n, color = pct_degree)) +
  geom_smooth() +
  scale_size_continuous(range = c(1, 10)) +
  scale_color_viridis_c() +
  labs(
    title = "Olympic Athletes per 100k vs. Median Household Income",
    x = "Median Household Income",
    y = "Olympic Athletes per 100k"
  ) +
  theme_minimal()

```

### Is there a relationship between education/income and Olympic success?
```{r}

athletes_summary %>% 
  ggplot(aes(x = median_household_income, y = medals_per_100k, label = state.abb)) +
  geom_point(aes(size = n, color = pct_degree)) +
  geom_smooth() +
  scale_size_continuous(range = c(1, 10)) +
  scale_color_viridis_c() +
  labs(
    title = "Medals Per 100k vs. % of Median HH Income",
    x = "% of Population with a Degree",
    y = "Olympic Athletes per 100k"
  ) +
  theme_minimal()

lm(medals_per_100k ~ pct_degree + median_household_income, data = athletes_summary) %>% 
  summary()



```

## Do Maryland's Olympians come from rich areas?
```{r}

geocoded_md <- 
  athletes %>% 
  ungroup() %>% 
  filter(str_detect(future_olympics, "2024")) %>%
  mutate(hometown_state = case_when(
    hometown_state == "MD" & !str_detect(hometown_city, "Washington") ~ "MD",
    str_detect(full_name, "Taylor Knibb") ~ "DC",
    str_detect(str_to_lower(full_name), "ruby lilley") ~ "MD",
    str_detect(str_to_lower(full_name), "kevin durant") ~ "MD",
    TRUE ~ hometown_state
  )) %>% 
  filter(hometown_state == "MD") %>% 
  mutate(city_state = paste(hometown_city, hometown_state, sep = ", ")) %>% 
  as.data.frame() %>% 
  # geocode 
  tidygeocoder::geocode(
    city = hometown_city,
    state = hometown_state
  )

geocoded_md %>%
  filter(!is.na(lat) & !is.na(long)) %>% 
  st_as_sf(coords = c("long", "lat"), crs = 4326) %>% 
  mapview()


md_income_data <- get_acs(
  geography = "county",
  variables = "B19013_001", # Median household income
  state = "MD",
  year = 2022,
  survey = "acs5",
  geometry = T
) 

md_income_data <- md_income_data %>% 
  st_transform(4326) 

geocoded_md %>% 
  filter(!is.na(lat) & !is.na(long)) %>% 
  st_as_sf(coords = c("long", "lat"), crs = 4326) %>% 
  st_join(md_income_data) %>% 
  View()
  
```
